{"version":3,"file":"static/js/93.db08566b.chunk.js","mappings":"uSAEaA,EAAWC,EAAAA,EAAAA,GAAH,oGAORC,EAAWD,EAAAA,EAAAA,GAAH,gM,SCwDrB,EA1Da,WACX,OAA4BE,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAjBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfJ,GAAS,GACTF,GAAW,GAHI,UAIQO,EAAAA,EAAAA,IAASJ,GAJjB,gBAIPK,EAJO,EAIPA,KACRV,EAAUU,GALK,kDAOfN,GAAS,GAPM,yBASfF,GAAW,GATI,6EAAH,qDAahBM,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAW,SAACU,EAAA,EAAD,IACXR,IAAS,SAACS,EAAA,EAAD,CAAOC,KAAM,iDACtBd,GAA4B,IAAlBA,EAAOe,SAChB,SAACnB,EAAD,UACGI,EAAOgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACV,UAACtB,EAAD,YACE,gBACEuB,IACED,EAAY,wCACyBA,GA9BlC,mDAiCLE,IAAI,UACJC,MAAM,MACNC,OAAO,SAET,uBAAIN,KACJ,uCACA,uBAAIC,MAbSF,EADL,MAmBfjB,GAA4B,IAAlBA,EAAOe,SAChB,SAACF,EAAA,EAAD,CACEC,KAAM,6DAKf,C,sEC7DYW,E,QAAY5B,EAAAA,EAAH,mF,SCItB,EAJc,SAAC,GAAc,IAAZiB,EAAW,EAAXA,KACf,OAAO,SAACW,EAAD,UAAYX,GACpB,C,mMCADY,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,cAFE,6NAIK,IAAMC,EAAiB,mCAAG,+GAEND,EAAAA,EAAAA,IAAU,sBAFJ,uBAErBE,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,sCAKvB,IAAIf,MAAM,KAAMgB,SALO,yDAAH,qDASjBC,EAAY,mCAAG,WAAMC,GAAN,kGAEDL,EAAAA,EAAAA,IAAA,6BAAgCK,IAF/B,uBAEhBH,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,sCAKlB,IAAIf,MAAM,KAAMgB,SALE,yDAAH,sDASZG,EAAa,mCAAG,WAAMf,GAAN,kGAEFS,EAAAA,EAAAA,IAAA,gBAAmBT,IAFjB,uBAEjBW,EAFiB,EAEjBA,KAFiB,kBAGlBA,GAHkB,sCAKnB,IAAIf,MAAM,KAAMgB,SALG,yDAAH,sDASbnB,EAAQ,mCAAG,WAAMO,GAAN,kGAEGS,EAAAA,EAAAA,IAAA,gBAAmBT,EAAnB,aAFH,uBAEZW,EAFY,EAEZA,KAFY,kBAGbA,GAHa,sCAKd,IAAIf,MAAM,KAAMgB,SALF,yDAAH,sDASRI,EAAW,mCAAG,WAAMhB,GAAN,kGAEAS,EAAAA,EAAAA,IAAA,gBAAmBT,EAAnB,aAFA,uBAEfW,EAFe,EAEfA,KAFe,kBAGhBA,GAHgB,sCAKjB,IAAIf,MAAM,KAAMgB,SALC,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx","helpers/moviesServise.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 90px) / 5);\n  border: 1px solid #800;\n  display: flex;\n  padding-bottom: 5px;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader';\nimport Error from 'components/Error';\nimport { findCast } from 'helpers/moviesServise';\nimport { CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const defaultImg = 'https://dummyimage.com/150x225/800000/800000.jpg';\n\n  useEffect(() => {\n    const searchCast = async () => {\n      try {\n        setError(false);\n        setLoading(true);\n        const { cast } = await findCast(movieId);\n        setActors(cast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    searchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <Error text={'Sorry something went wrong, please try again'} />}\n      {actors && actors.length !== 0 && (\n        <CastList>\n          {actors.map(({ id, name, character, profile_path }) => (\n            <CastItem key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `http://image.tmdb.org/t/p/w500${profile_path}`\n                    : defaultImg\n                }\n                alt=\"profile\"\n                width=\"150\"\n                height=\"225\"\n              />\n              <p>{name}</p>\n              <p>Character:</p>\n              <p>{character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n      {actors && actors.length === 0 && (\n        <Error\n          text={'We don`t have any information about cast of this movie'}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: #800;\n  font-size: 35px;\n  text-align: center;\n`;\n","import { ErrorText } from './Error.styled';\n\nconst Error = ({ text }) => {\n  return <ErrorText>{text}</ErrorText>;\n};\n\nexport default Error;\n","import axios from 'axios';\n\nconst API_KEY =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYmI3YTY1YmJhMTVkYTU2OGZjNzJlODdiNGU1MzA0ZSIsInN1YiI6IjYzZGQ1MWIyMzczYWMyMDA3YzFmNTIyNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.8pLwd2kDBypx7lwFPRi_J8X3NWyZonT21z3rtiXLa2E';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.Authorization = API_KEY;\n\nexport const getTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get('trending/movie/day');\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const { data } = await axios.get(`search/movie?query=${query}`);\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const findMovieById = async id => {\n  try {\n    const { data } = await axios.get(`movie/${id}`);\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const findCast = async id => {\n  try {\n    const { data } = await axios.get(`movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const findReviews = async id => {\n  try {\n    const { data } = await axios.get(`movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n"],"names":["CastList","styled","CastItem","useState","actors","setActors","loading","setLoading","error","setError","movieId","useParams","useEffect","searchCast","findCast","cast","Loader","Error","text","length","map","id","name","character","profile_path","src","alt","width","height","ErrorText","axios","getTrendingMovies","data","message","searchMovies","query","findMovieById","findReviews"],"sourceRoot":""}